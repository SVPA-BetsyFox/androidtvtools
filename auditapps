#!/usr/bin/env node
let execSync = require('child_process').execSync;
let chalk = require('chalk');

let show_cursor = (show=true) => {
  if (show) process.stdout.write('\x1B[?25h\r');
  else process.stdout.write('\x1B[?25l\r');
}

let error = (...args) => {
  console.log(chalk.redBright(args));
}

let print_usage = () => {
  console.log("Usage:\n./auditapps [ip address or hostname of device] [ip address or hostname of another device] [...]");
}


let init = () => {
  show_cursor(false);
  let args = [...process.argv];
  args.shift();
  args.shift();
  if (args.length < 1) {
    print_usage();
    show_cursor(true);
    process.exit();
  }
  args.forEach(arg => {
    console.log(`Connecting to ${arg}`);
    if (!connect(arg)) error(`Unable to connect to ${arg}.`);
  });
}


let prog = () => process.stdout.write(".");


let progress = (count, i, note="") => {
  let cols = process.stdout.columns;
  process.stdout.write(`\r[${i}/${count}] ${note}`.padEnd(cols))
};


let progress_bar = (count, i, size=25, note="") => {
  let cols = process.stdout.columns;
  let bar = Math.floor((count/i) * (size));
  process.stderr.write(`\r${chalk.greenBright.bgGreen(" ".repeat(bar) + "â–“") + chalk.bgBlue(" ".repeat(size-bar))} (${percent(count, i)}%) ${note}`.padEnd(cols));
};


let percent = (count, i) => {
  return Math.floor((count / i) * 100);
};



let adb = function(serial, command) {
  let out = execute(`adb -s ${serial} ${command}`);
  if (out) {
    return out;
  } else {
    error(`Connection to ${serial} lost, reconnecting...`);
    if (connect(serial))
      return adb(serial, command);
    else {
      error("Failed to connect!");
      return false;
    }
  }
};


let connect = function(serial, port) {
  if (port) serial = `${serial}:${port}`;
  let status = execute(`adb connect ${serial}`);
  return !(status.indexOf("unable") > -1);
};


let execute = function(cmd) {
  // console.log(`#### ===> EXECUTING "${cmd}"`);
  let out = false;
  try {
    out = execSync(cmd).toString();
  } catch (err) {
    console.log(chalk.red(err.message));
  }
  return out;
};



let get_devices = () => {
  let raw = execute("adb devices -l").split("\n");
  raw.shift();
  raw = raw.filter(e => e.trim() != '');
  let count = raw.length, i = 0;
  raw = raw.map(e => {
    progress(++i, count);
    e = e.split(/\s+/);
    let id = e.shift();
    let type = e.shift();
    let data = {};
    e.forEach(item => {
      let [label, value] = item.split(":");
      data[label] = value;
    });
    return {id: id, type: type, ...data};
  });
  return raw;
};


let get_package_ver = function(serial="NONE", package) {
  let raw = adb(serial, `shell dumpsys package ${package} | grep versionName`).split("\n")[0];
  return raw.slice(raw.indexOf("=") + 1).trim();
};


let get_package_info = function(serial="NONE", package) {
  return adb(serial, `shell dumpsys package ${package}`);
};


let get_active_app = function(serial="NONE") {
  let regex = /(?:\{)(\w+)\s(\w+)\s(.+)(?:\})/;
  let rawCurrentFocus = adb(serial, `shell dumpsys window windows | grep -E mCurrentFocus`);
  let [package, activity] = regex.exec(rawCurrentFocus)[3].split("/");
  return { appPackage: package, appActivity: activity };
};



let get_apps = function(serial="NONE") {
  let raw = execute(`adb -s ${serial} shell pm list packages -f`).split(/\r*\n/);
  let count = raw.length, i = 1;

  //skip blanks, grab apk, package name, and version for each hit
  raw = raw.filter(x => x !== "").sort().map(x => {
    let package = x.slice(x.indexOf(":") + 1).split("=").pop();
    let apk = x.slice(x.indexOf(":") + 1, x.lastIndexOf("="));
    let version = get_package_ver(serial, package);
    let rawinfo = get_package_info(serial, package);
    progress_bar(++i, count, 33, package);
    return { apk: apk, package: package, version: version, rawinfo: rawinfo };
  });
  progress_bar(1, 1, 33, "Processing report...");
  return raw;
};


let report = {};
init();

let devices = get_devices();

if (devices.length < 1)  {
  error("Unable to connect to any devices.");
  process.exit(1);
}

devices.forEach(device => {
  console.log();
  console.log(`Enumerating apps on ${device.id}...`);
  report[device.id] = {};
  device["activeApp"] = get_active_app(device.id);
  report[device.id]["device"] = device;
  report[device.id]["apps"] = get_apps(device.id);
})

report_json = JSON.stringify(report, null, 2);
console.log(report_json);
process.stdout.write('\x1B[?25h\r');